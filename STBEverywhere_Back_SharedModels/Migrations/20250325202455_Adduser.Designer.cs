// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using STBEverywhere_Back_SharedModels.Data;

#nullable disable

namespace STBEverywhere_Back_SharedModels.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250325202455_Adduser")]
    partial class Adduser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("DemandeCarte", b =>
                {
                    b.Property<int>("Iddemande")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CIN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("CarteAjouter")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("ClientId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EmailEnvoye")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EmailEnvoyeLivree")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("NomCarte")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumCompte")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("NumTel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TypeCarte")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Iddemande");

                    b.HasIndex("ClientId");

                    b.ToTable("DemandesCarte");

                    b.HasData(
                        new
                        {
                            Iddemande = 1,
                            CIN = "14668061",
                            CarteAjouter = false,
                            ClientId = 1,
                            DateCreation = new DateTime(2025, 3, 25, 20, 24, 54, 651, DateTimeKind.Local).AddTicks(2077),
                            Email = "john.doe@example.com",
                            EmailEnvoye = false,
                            EmailEnvoyeLivree = false,
                            NomCarte = "VisaClassic",
                            NumCompte = "12345678923537902652",
                            NumTel = "12345678",
                            Statut = "DisponibleEnAgence",
                            TypeCarte = "International"
                        },
                        new
                        {
                            Iddemande = 2,
                            CIN = "14668062",
                            CarteAjouter = false,
                            ClientId = 2,
                            DateCreation = new DateTime(2025, 3, 25, 20, 24, 54, 651, DateTimeKind.Local).AddTicks(2200),
                            Email = "jane.smith@example.com",
                            EmailEnvoye = false,
                            EmailEnvoyeLivree = false,
                            NomCarte = "Mastercard",
                            NumCompte = "65432110223463790345",
                            NumTel = "87654321",
                            Statut = "EnPreparation",
                            TypeCarte = "National"
                        });
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Civilite")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("DateDelivranceCIN")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateExpirationCIN")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateNaissance")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EtatCivil")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LieuDelivranceCIN")
                        .HasColumnType("longtext");

                    b.Property<string>("Nationalite")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NiveauEducation")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("NomMere")
                        .HasColumnType("longtext");

                    b.Property<string>("NomPere")
                        .HasColumnType("longtext");

                    b.Property<int>("NombreEnfants")
                        .HasColumnType("int");

                    b.Property<string>("NumCIN")
                        .HasColumnType("longtext");

                    b.Property<string>("PaysNaissance")
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoClient")
                        .HasColumnType("longtext");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("RevenuMensuel")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("SituationProfessionnelle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Adresse = "123 Main St",
                            Civilite = "M",
                            DateDelivranceCIN = new DateTime(2010, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateExpirationCIN = new DateTime(2030, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateNaissance = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "guesmiimahmoud@gmail.com",
                            EtatCivil = "Célibataire",
                            Genre = "Masculin",
                            LieuDelivranceCIN = "New York",
                            Nationalite = "US",
                            NiveauEducation = "Master",
                            Nom = "Doe",
                            NomMere = "Jane Doe",
                            NomPere = "John Doe Sr.",
                            NombreEnfants = 2,
                            NumCIN = "14668061",
                            PaysNaissance = "USA",
                            PhotoClient = "mahmoud.jpg",
                            Prenom = "John",
                            Profession = "Ingénieur",
                            Residence = "New York",
                            RevenuMensuel = 5000.00m,
                            SituationProfessionnelle = "Employé",
                            Telephone = "123456789",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Adresse = "456 Elm St",
                            Civilite = "Mme",
                            DateDelivranceCIN = new DateTime(2015, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateExpirationCIN = new DateTime(2035, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateNaissance = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "jane.smith@example.com",
                            EtatCivil = "Marié(e)",
                            Genre = "Féminin",
                            LieuDelivranceCIN = "Toronto",
                            Nationalite = "CA",
                            NiveauEducation = "Doctorat",
                            Nom = "Smith",
                            NomMere = "Mary Smith",
                            NomPere = "Robert Smith",
                            NombreEnfants = 1,
                            NumCIN = "14668062",
                            PaysNaissance = "Canada",
                            PhotoClient = "mahmoud.jpg",
                            Prenom = "Jane",
                            Profession = "Médecin",
                            Residence = "Toronto",
                            RevenuMensuel = 7000.00m,
                            SituationProfessionnelle = "Indépendant",
                            Telephone = "987654321",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Compte", b =>
                {
                    b.Property<string>("RIB")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("MontantMaxAutoriseParJour")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("NbrOperationsAutoriseesParJour")
                        .HasColumnType("longtext");

                    b.Property<string>("NumCin")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Solde")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RIB");

                    b.HasIndex("ClientId");

                    b.ToTable("Comptes");

                    b.HasData(
                        new
                        {
                            RIB = "12345678923537902652",
                            ClientId = 1,
                            DateCreation = new DateTime(2024, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MontantMaxAutoriseParJour = 0m,
                            NumCin = "14668061",
                            Solde = 1000.50m,
                            Statut = "Actif",
                            Type = "Courant"
                        },
                        new
                        {
                            RIB = "65432110223463790345",
                            ClientId = 2,
                            DateCreation = new DateTime(2025, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MontantMaxAutoriseParJour = 0m,
                            NumCin = "14668062",
                            Solde = 5000.00m,
                            Statut = "Actif",
                            Type = "Epargne"
                        });
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Departement")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Agents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Departement = "Administration",
                            Nom = "Admin",
                            Prenom = "STB",
                            UserId = 3
                        });
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.Beneficiaire", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RIBCompte")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RaisonSociale")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Beneficiaires");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.Carte", b =>
                {
                    b.Property<string>("NumCarte")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CodeCVV")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CodePIN")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompteRIB")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateExpiration")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateRecuperation")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Iddemande")
                        .HasColumnType("int");

                    b.Property<string>("Nature")
                        .HasColumnType("longtext");

                    b.Property<string>("NomCarte")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("PlafondDAP")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("PlafondTPE")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("RIB")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<decimal?>("Solde")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TypeCarte")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("NumCarte");

                    b.HasIndex("CompteRIB");

                    b.HasIndex("Iddemande");

                    b.HasIndex("RIB");

                    b.ToTable("Cartes");

                    b.HasData(
                        new
                        {
                            NumCarte = "1111222233334444",
                            CodeCVV = "",
                            CodePIN = "",
                            DateCreation = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateExpiration = new DateTime(2027, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iddemande = 1,
                            Nature = "postpayée",
                            NomCarte = "VisaClassic",
                            PlafondDAP = 20000m,
                            PlafondTPE = 40000m,
                            RIB = "12345678923537902652",
                            Solde = 1000.50m,
                            Statut = "Active",
                            TypeCarte = "International"
                        },
                        new
                        {
                            NumCarte = "5555666677778888",
                            CodeCVV = "",
                            CodePIN = "",
                            DateCreation = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateExpiration = new DateTime(2027, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Iddemande = 2,
                            Nature = "postpayée",
                            NomCarte = "Mastercard",
                            PlafondDAP = 20000m,
                            PlafondTPE = 40000m,
                            RIB = "65432110223463790345",
                            Solde = 5000.00m,
                            Statut = "Active",
                            TypeCarte = "National"
                        });
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.Chequier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateLivraison")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DemandeChequierId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemandeChequierId");

                    b.ToTable("Chequiers");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.DemandeChequier", b =>
                {
                    b.Property<int>("IdDemande")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool?>("AccepteEngagement")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AdresseComplete")
                        .HasColumnType("longtext");

                    b.Property<string>("Agence")
                        .HasColumnType("longtext");

                    b.Property<string>("CodePostal")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateDemande")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("ModeLivraison")
                        .HasColumnType("int");

                    b.Property<int>("NombreFeuilles")
                        .HasColumnType("int");

                    b.Property<string>("NumTel")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroChequier")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Otp")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal>("PlafondChequier")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("RaisonDemande")
                        .HasColumnType("longtext");

                    b.Property<string>("RibCompte")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("isBarre")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("IdDemande");

                    b.HasIndex("RibCompte");

                    b.ToTable("DemandesChequiers");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.EmailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Contenu")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateEnvoi")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("DemandeId")
                        .HasColumnType("int");

                    b.Property<string>("Destinataire")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("EmailType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsEnvoye")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Sujet")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DemandeId");

                    b.ToTable("EmailLogs");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.FeuilleChequier", b =>
                {
                    b.Property<int>("IdFeuille")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DemandeChequierId")
                        .HasColumnType("int");

                    b.Property<string>("NumeroFeuille")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("PlafondFeuille")
                        .HasColumnType("decimal(10,3)");

                    b.HasKey("IdFeuille");

                    b.HasIndex("DemandeChequierId");

                    b.ToTable("FeuillesChequiers");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ResetPasswordToken")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("ResetPasswordTokenExpiry")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "guesmiimahmoud@gmail.com",
                            IsActive = true,
                            PasswordHash = "$2a$11$NIP/piS6PvzbKU98O5OLBOEuP9yrF8DC2QiF5Z5FyxNLmR4J29pdy",
                            Role = "Client"
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@example.com",
                            IsActive = true,
                            PasswordHash = "$2a$11$6LEbkGEkjF84eAGJYvXgwO0jgIxb.9chueTxnLLqcp0JAqKd8CVEC",
                            Role = "Client"
                        },
                        new
                        {
                            Id = 3,
                            Email = "agent@stb.com",
                            IsActive = true,
                            PasswordHash = "$2a$11$6TvBHkaaNqzqfNKbm8cDo.lrjm78uE7ZC1Giee5g4cX47GKdk/YgK",
                            Role = "Agent"
                        });
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Virement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateVirement")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FichierBeneficaires")
                        .HasColumnType("longtext");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18,3)");

                    b.Property<string>("Motif")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("RIB_Emetteur")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RIB_Recepteur")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TypeVirement")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("RIB_Emetteur", "DateVirement")
                        .IsUnique();

                    b.ToTable("Virements");
                });

            modelBuilder.Entity("DemandeCarte", b =>
                {
                    b.HasOne("STBEverywhere_Back_SharedModels.Client", "Client")
                        .WithMany("DemandesCarte")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Client", b =>
                {
                    b.HasOne("STBEverywhere_Back_SharedModels.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("STBEverywhere_Back_SharedModels.Client", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Compte", b =>
                {
                    b.HasOne("STBEverywhere_Back_SharedModels.Client", "Client")
                        .WithMany("Comptes")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.Agent", b =>
                {
                    b.HasOne("STBEverywhere_Back_SharedModels.Models.User", "User")
                        .WithOne()
                        .HasForeignKey("STBEverywhere_Back_SharedModels.Models.Agent", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.Beneficiaire", b =>
                {
                    b.HasOne("STBEverywhere_Back_SharedModels.Client", "Client")
                        .WithMany("Beneficiaires")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.Carte", b =>
                {
                    b.HasOne("STBEverywhere_Back_SharedModels.Compte", null)
                        .WithMany("Cartes")
                        .HasForeignKey("CompteRIB");

                    b.HasOne("DemandeCarte", "DemandeCarte")
                        .WithMany()
                        .HasForeignKey("Iddemande")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("STBEverywhere_Back_SharedModels.Compte", "Compte")
                        .WithMany()
                        .HasForeignKey("RIB")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Compte");

                    b.Navigation("DemandeCarte");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.Chequier", b =>
                {
                    b.HasOne("STBEverywhere_Back_SharedModels.Models.DemandeChequier", "DemandeChequier")
                        .WithMany()
                        .HasForeignKey("DemandeChequierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DemandeChequier");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.DemandeChequier", b =>
                {
                    b.HasOne("STBEverywhere_Back_SharedModels.Compte", "Compte")
                        .WithMany()
                        .HasForeignKey("RibCompte")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compte");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.EmailLog", b =>
                {
                    b.HasOne("STBEverywhere_Back_SharedModels.Models.DemandeChequier", "DemandeChequier")
                        .WithMany("Emails")
                        .HasForeignKey("DemandeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DemandeChequier");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.FeuilleChequier", b =>
                {
                    b.HasOne("STBEverywhere_Back_SharedModels.Models.DemandeChequier", "DemandeChequier")
                        .WithMany("Feuilles")
                        .HasForeignKey("DemandeChequierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DemandeChequier");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Client", b =>
                {
                    b.Navigation("Beneficiaires");

                    b.Navigation("Comptes");

                    b.Navigation("DemandesCarte");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Compte", b =>
                {
                    b.Navigation("Cartes");
                });

            modelBuilder.Entity("STBEverywhere_Back_SharedModels.Models.DemandeChequier", b =>
                {
                    b.Navigation("Emails");

                    b.Navigation("Feuilles");
                });
#pragma warning restore 612, 618
        }
    }
}
